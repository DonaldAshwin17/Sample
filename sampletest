import React from 'react';
import { shallow } from 'enzyme';
import ReactDOM from 'react-dom';
import App from './App';
import { setUserId } from './services/piwik.service';
import './serviceWorker';

// Mock dependencies
jest.mock('./App', () => () => <div>Mocked App</div>);
jest.mock('./services/piwik.service', () => ({
  setUserId: jest.fn(),
}));
jest.mock('./serviceWorker', () => ({
  unregister: jest.fn(),
}));

// Mock document.querySelector
const mockWidget = {
  sgwtConnect: {
    getAuthorizationError: jest.fn(),
    isAuthorized: jest.fn(),
    getIdTokenClaims: jest.fn(),
    requestAuthorization: jest.fn(),
  },
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
};
document.querySelector = jest.fn().mockImplementation((selector) => {
  if (selector === 'sgut-connect') return mockWidget;
  return null;
});

describe('index.tsx', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    document.body.innerHTML = '';
  });

  it('renders error when no widget is found', () => {
    document.querySelector = jest.fn().mockReturnValue(null);
    require('./index');
    expect(document.body.innerHTML).toContain('No widget found to handle the authentication on this application!');
  });

  it('adds event listener when widget is not ready', () => {
    mockWidget.sgwtConnect = null;
    require('./index');
    expect(mockWidget.addEventListener).toHaveBeenCalledWith('sgwt-connect--ready', expect.any(Function));
  });

  it('handles authorization error', () => {
    mockWidget.sgwtConnect.getAuthorizationError.mockReturnValue('Some error');
    mockWidget.sgwtConnect.isAuthorized.mockReturnValue(false);
    require('./index');
    expect(document.body.innerHTML).toContain('Authorization error: Some error.');
  });

  it('requests authorization when not authorized', () => {
    mockWidget.sgwtConnect.getAuthorizationError.mockReturnValue(null);
    mockWidget.sgwtConnect.isAuthorized.mockReturnValue(false);
    require('./index');
    expect(mockWidget.sgwtConnect.requestAuthorization).toHaveBeenCalled();
  });

  it('renders App and sets user id when authorized', () => {
    mockWidget.sgwtConnect.getAuthorizationError.mockReturnValue(null);
    mockWidget.sgwtConnect.isAuthorized.mockReturnValue(true);
    mockWidget.sgwtConnect.getIdTokenClaims.mockReturnValue({ sub: '12345' });
    require('./index');
    expect(setUserId).toHaveBeenCalledWith('12345');
    expect(ReactDOM.render).toHaveBeenCalledWith(<App />, document.getElementById('root'));
  });
});

