import { getTemplatePurposeNumber } from './path-to-your-file'; // Adjust the import path as needed
import * as mammoth from 'mammoth';

jest.mock('mammoth', () => ({
  extractRawText: jest.fn(),
}));

describe('getTemplatePurposeNumber', () => {
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should return purposeNumber as 0 if disclaimers are empty or not an array', async () => {
    const template = {};
    const disclaimers = null;

    const result = await getTemplatePurposeNumber(template, disclaimers);

    expect(result).toEqual({
      purposeNumber: 0,
      isValid: true,
    });
  });

  it('should call readFileAsArrayBuffer if template is an instance of File', async () => {
    const mockFile = new Blob(['test'], { type: 'text/plain' });
    const disclaimers = ['disclaimer1', 'disclaimer2'];

    const arrayBuffer = new ArrayBuffer(8);
    const readFileAsArrayBufferMock = jest.fn().mockResolvedValue(arrayBuffer);
    global.readFileAsArrayBuffer = readFileAsArrayBufferMock;

    mammoth.extractRawText.mockResolvedValue({ value: 'mockValue' });

    const result = await getTemplatePurposeNumber(mockFile, disclaimers);

    expect(readFileAsArrayBufferMock).toHaveBeenCalledWith(mockFile);
    expect(result).toEqual({
      purposeNumber: disclaimers.length,
      isValid: true,
    });
  });

  it('should return isValid as false if purposeNumber does not match totalDisclaimers', async () => {
    const template = {};
    const disclaimers = ['disclaimer1'];

    const arrayBuffer = new ArrayBuffer(8);
    mammoth.extractRawText.mockResolvedValue({ value: '+++INS ${purpose}1.value +++' });

    const result = await getTemplatePurposeNumber(arrayBuffer, disclaimers);

    expect(result).toEqual({
      purposeNumber: 1,
      isValid: false,
    });
  });

  it('should catch and log errors during parsing', async () => {
    const template = {};
    const disclaimers = ['disclaimer1'];

    const error = new Error('Test error');
    mammoth.extractRawText.mockRejectedValue(error);

    const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});

    await getTemplatePurposeNumber(template, disclaimers);

    expect(consoleSpy).toHaveBeenCalledWith('Error during parsing docx file', error);

    consoleSpy.mockRestore();
  });
});
