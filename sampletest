import React from 'react';
import ReactDOM from 'react-dom';
import { shallow } from 'enzyme';
import App from './App';
import * as serviceWorker from './serviceWorker';
import { setUserId } from './services/piwik.service';

jest.mock('./App', () => () => <div>App Component</div>);
jest.mock('./serviceWorker', () => ({ unregister: jest.fn() }));
jest.mock('./services/piwik.service', () => ({ setUserId: jest.fn() }));

describe('index.tsx', () => {
  let widgetMock: any;
  
  beforeEach(() => {
    document.body.innerHTML = '<div id="root"></div><sgut-connect></sgut-connect>';
    widgetMock = document.querySelector('sgut-connect');
    widgetMock.sgwtConnect = {
      getAuthorizationError: jest.fn(),
      isAuthorized: jest.fn(),
      getIdTokenClaims: jest.fn(),
      requestAuthorization: jest.fn(),
    };
  });

  const renderApp = () => {
    ReactDOM.render(<App />, document.getElementById('root'));
  };

  const runIndex = () => {
    require('./index');
  };

  afterEach(() => {
    jest.resetModules();
  });

  it('renders App when sgwtConnect is authorized', () => {
    widgetMock.sgwtConnect.isAuthorized.mockReturnValue(true);
    widgetMock.sgwtConnect.getIdTokenClaims.mockReturnValue({ sub: '123' });

    runIndex();

    expect(setUserId).toHaveBeenCalledWith('123');
    expect(ReactDOM.render).toHaveBeenCalledWith(<App />, document.getElementById('root'));
  });

  it('requests authorization when sgwtConnect is not authorized', () => {
    widgetMock.sgwtConnect.isAuthorized.mockReturnValue(false);

    runIndex();

    expect(widgetMock.sgwtConnect.requestAuthorization).toHaveBeenCalled();
  });

  it('displays an error message when sgwtConnect returns an authorization error', () => {
    widgetMock.sgwtConnect.getAuthorizationError.mockReturnValue('Error message');

    runIndex();

    expect(document.body.innerHTML).toContain('Authorization error: Error message.');
  });

  it('displays an error message when widget is null', () => {
    document.body.innerHTML = '<div id="root"></div>';
    
    runIndex();

    expect(document.body.innerHTML).toContain('No widget found to handle the authentication on this application!');
  });

  it('unregisters the service worker', () => {
    runIndex();

    expect(serviceWorker.unregister).toHaveBeenCalled();
  });

  it('handles sgwt-connect--ready event', () => {
    widgetMock.addEventListener = jest.fn((event, callback) => {
      if (event === 'sgwt-connect--ready') {
        callback();
      }
    });

    runIndex();

    expect(widgetMock.addEventListener).toHaveBeenCalledWith('sgwt-connect--ready', expect.any(Function));
  });
});
