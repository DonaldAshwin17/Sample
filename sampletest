import { deleteSetById } from './path-to-your-file'; // Adjust the import path as needed
import * as api from '../path-to-api'; // Mock the api module, adjust the import path as needed
import { initDialog } from '../dialog/dialog.actions'; // Adjust the import path as needed
import { fetchSetList } from '../path-to-fetchSetList'; // Adjust the import path as needed

jest.mock('../path-to-api'); // Mocking the api module
jest.mock('../dialog/dialog.actions'); // Mocking the dialog actions
jest.mock('../path-to-fetchSetList'); // Mocking fetchSetList action

describe('deleteSetById', () => {
  let dispatchMock;

  beforeEach(() => {
    dispatchMock = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should dispatch actions and resolve both promises successfully', async () => {
    const mockId = '123';
    const mockUserToModify = 'userA';

    // Mock API calls
    api.delete = jest.fn().mockResolvedValue({ data: 'deleted' });
    api.post = jest.fn().mockResolvedValue({ data: 'saved' });

    await deleteSetById(mockId, mockUserToModify)(dispatchMock);

    // Check dispatch calls for fetchSetList and initDialog
    expect(api.delete).toHaveBeenCalledWith(`${constants.API_V1_URL}/sets/${mockId}`);
    expect(api.post).toHaveBeenCalledWith(`${constants.API_V1_URL}/browser-history/browser-history-set`, expect.objectContaining({
      createdBy: mockUserToModify,
      relId: mockId,
    }));

    expect(dispatchMock).toHaveBeenCalledWith(fetchSetList());
    expect(dispatchMock).toHaveBeenCalledWith(initDialog());

    // Check if the promises were resolved correctly
    expect(api.delete).toHaveBeenCalledTimes(1);
    expect(api.post).toHaveBeenCalledTimes(1);
  });

  it('should catch and log errors', async () => {
    const mockId = '123';
    const mockUserToModify = 'userA';
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});

    // Mock API call to throw an error
    api.delete = jest.fn().mockRejectedValue(new Error('API delete failed'));
    api.post = jest.fn().mockRejectedValue(new Error('API post failed'));

    await deleteSetById(mockId, mockUserToModify)(dispatchMock);

    expect(consoleSpy).toHaveBeenCalledWith(expect.any(Error));

    consoleSpy.mockRestore();
  });
});
