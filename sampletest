import React from 'react';
import { shallow } from 'enzyme';
import { DraftOrPublishAction } from './DraftOrPublishAction';
import { Switch, Grid } from '@material-ui/core';
import { FormattedMessage } from 'react-intl';

jest.mock('redux-react-hook', () => ({
  useMappedState: jest.fn(),
}));

describe('DraftOrPublishAction Component', () => {
  const mockFn = jest.fn();

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should render correctly when valueDraftOrPublish is true', () => {
    const useMappedState = require('redux-react-hook').useMappedState;
    useMappedState.mockReturnValue(true);

    const wrapper = shallow(<DraftOrPublishAction onDraftOrPublish={mockFn} />);

    expect(wrapper.find(Grid).at(0).text()).toContain('set.draft');
    expect(wrapper.find(Switch).prop('defaultChecked')).toBe(true);
    expect(wrapper.find(Switch).prop('onChange')).toBe(mockFn);
    expect(wrapper.find(Grid).at(2).text()).toContain('set.publish');
  });

  it('should render correctly when valueDraftOrPublish is false', () => {
    const useMappedState = require('redux-react-hook').useMappedState;
    useMappedState.mockReturnValue(false);

    const wrapper = shallow(<DraftOrPublishAction onDraftOrPublish={mockFn} />);

    expect(wrapper.find(Grid).at(0).text()).toContain('set.draft');
    expect(wrapper.find(Switch).prop('defaultChecked')).toBe(false);
    expect(wrapper.find(Switch).prop('onChange')).toBe(mockFn);
    expect(wrapper.find(Grid).at(2).text()).toContain('set.publish');
  });

  it('should handle onChange event', () => {
    const useMappedState = require('redux-react-hook').useMappedState;
    useMappedState.mockReturnValue(true);

    const wrapper = shallow(<DraftOrPublishAction onDraftOrPublish={mockFn} />);
    wrapper.find(Switch).simulate('change');

    expect(mockFn).toHaveBeenCalled();
  });
});
