import { createWhereClause, getSetByIdWhereClause, createWhereClauseWithThematic } from './your-file-name';
import { Raw, In } from 'typeorm';

// Mock the getDateToIsoString function
jest.mock('./date', () => ({
    getDateToIsoString: jest.fn((date) => date.toISOString()),
}));

describe('createWhereClause', () => {
    it('should create where clause with title', () => {
        const whereClause = createWhereClause('test', null, null, null);
        expect(whereClause.title).toBeDefined();
        expect(whereClause.validFromDate).toBeDefined();
        expect(whereClause.expirationDate).toBeDefined();
    });

    it('should create where clause with languages', () => {
        const whereClause = createWhereClause(null, null, ['en', 'es'], null);
        expect(whereClause.languages).toBeDefined();
    });

    it('should create where clause with ids', () => {
        const whereClause = createWhereClause(null, null, null, ['1', '2']);
        expect(whereClause.id).toBeDefined();
    });

    it('should create where clause with legalProvisionSupportTypeList', () => {
        const whereClauses = createWhereClause(null, ['1', '2'], null, null);
        expect(whereClauses).toBeInstanceOf(Array);
        expect(whereClauses.length).toBe(2);
    });

    it('should handle null values correctly', () => {
        const whereClause = createWhereClause(null, null, null, null);
        expect(whereClause).toBeDefined();
    });
});

describe('getSetByIdWhereClause', () => {
    it('should create a where clause with id', () => {
        const whereClause = getSetByIdWhereClause('123');
        expect(whereClause.id).toBe('123');
        expect(whereClause.validFromDate).toBeDefined();
        expect(whereClause.expirationDate).toBeDefined();
    });
});

describe('createWhereClauseWithThematic', () => {
    it('should create where clause with languages and subthemes', () => {
        const whereClause = createWhereClauseWithThematic(['en'], ['theme1'], 'geographicalArea1');
        expect(whereClause.languages).toBeDefined();
    });

    it('should create where clause without optional parameters', () => {
        const whereClause = createWhereClauseWithThematic(null, null, null);
        expect(whereClause).toBeDefined();
    });

    it('should handle the case where subthemes are passed', () => {
        const consoleSpy = jest.spyOn(console, 'log');
        createWhereClauseWithThematic(null, ['subtheme1'], 'geographicalArea1');
        expect(consoleSpy).toHaveBeenCalledWith("", ['subtheme1'], 'geographicalArea1');
    });
});
