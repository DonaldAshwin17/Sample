// index.test.tsx
import React from 'react';
import ReactDOM from 'react-dom';
import { mount } from 'enzyme';
import App from './App';
import * as serviceWorker from './serviceWorker';
import { setUserId } from './services/piwik.service';

jest.mock('react-dom', () => ({
  render: jest.fn(),
}));
jest.mock('./serviceWorker', () => ({
  unregister: jest.fn(),
}));
jest.mock('./services/piwik.service', () => ({
  setUserId: jest.fn(),
}));

describe('index.tsx', () => {
  let widget: any;

  beforeEach(() => {
    widget = {
      sgwtConnect: {
        getAuthorizationError: jest.fn(),
        isAuthorized: jest.fn(),
        getIdTokenClaims: jest.fn(),
        requestAuthorization: jest.fn(),
      },
      addEventListener: jest.fn((event, callback) => {
        if (event === 'sgwt-connect--ready') {
          widget.sgwtConnect.isAuthorized.mockReturnValue(true);
          widget.sgwtConnect.getIdTokenClaims.mockReturnValue({ sub: 'testUserId' });
          callback();
        }
      }),
      removeEventListener: jest.fn(),
    };
    document.querySelector = jest.fn().mockReturnValue(widget);
    document.body.innerHTML = '';
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  it('should render App if widget is authorized', () => {
    widget.sgwtConnect.isAuthorized.mockReturnValue(true);
    widget.sgwtConnect.getIdTokenClaims.mockReturnValue({ sub: 'testUserId' });

    require('./index');

    expect(setUserId).toHaveBeenCalledWith('testUserId');
    expect(ReactDOM.render).toHaveBeenCalledWith(<App />, document.getElementById('root'));
  });

  it('should request authorization if widget is not authorized', () => {
    widget.sgwtConnect.isAuthorized.mockReturnValue(false);

    require('./index');

    expect(widget.sgwtConnect.requestAuthorization).toHaveBeenCalled();
  });

  it('should show authorization error if there is an authorization error', () => {
    widget.sgwtConnect.getAuthorizationError.mockReturnValue('Error message');

    require('./index');

    expect(document.body.innerHTML).toContain('Authorization error: Error message');
  });

  it('should show "No widget found" message if widget is null', () => {
    document.querySelector = jest.fn().mockReturnValue(null);

    require('./index');

    expect(document.body.innerHTML).toContain('No widget found to handle the authentication on this application!');
  });

  it('should handle sgwt-connect--ready event and render App', () => {
    widget.sgwtConnect.isAuthorized.mockReturnValueOnce(false);
    widget.addEventListener = jest.fn((event, callback) => {
      if (event === 'sgwt-connect--ready') {
        widget.sgwtConnect.isAuthorized.mockReturnValue(true);
        widget.sgwtConnect.getIdTokenClaims.mockReturnValue({ sub: 'testUserId' });
        callback();
      }
    });

    require('./index');

    expect(widget.addEventListener).toHaveBeenCalledWith('sgwt-connect--ready', expect.any(Function));
    expect(setUserId).toHaveBeenCalledWith('testUserId');
    expect(ReactDOM.render).toHaveBeenCalledWith(<App />, document.getElementById('root'));
  });

  it('should unregister service worker', () => {
    require('./index');

    expect(serviceWorker.unregister).toHaveBeenCalled();
  });
});
