import { generateUrl, getCurrentUrlFromRequest } from './your-file-name';

describe('generateUrl', () => {
    it('should return undefined if page is 1 or equal to totalPages', () => {
        expect(generateUrl({ page: 1, currentUrl: 'http://example.com', totalPages: 5 })).toBeUndefined();
        expect(generateUrl({ page: 5, currentUrl: 'http://example.com', totalPages: 5 })).toBeUndefined();
    });

    it('should return a URL with the page query param when other query params exist', () => {
        const result = generateUrl({ page: 3, currentUrl: 'http://example.com?foo=bar&baz=qux', totalPages: 5 });
        expect(result).toBe('http://example.com?foo=bar&baz=qux&page=3');
    });

    it('should return a URL with the page query param when page already exists', () => {
        const result = generateUrl({ page: 2, currentUrl: 'http://example.com?foo=bar&page=1&baz=qux', totalPages: 5 });
        expect(result).toBe('http://example.com?foo=bar&page=2&baz=qux');
    });

    it('should return a URL with only the page query param when no other query params exist', () => {
        const result = generateUrl({ page: 2, currentUrl: 'http://example.com', totalPages: 5 });
        expect(result).toBe('http://example.com?page=2');
    });

    it('should correctly handle URLs with no existing query params', () => {
        const result = generateUrl({ page: 2, currentUrl: 'http://example.com?', totalPages: 5 });
        expect(result).toBe('http://example.com?page=2');
    });
});

describe('getCurrentUrlFromRequest', () => {
    it('should return the full URL from the request object', () => {
        const request = {
            protocol: 'http',
            headers: {
                host: 'example.com',
            },
            url: '/path?foo=bar',
        };

        const result = getCurrentUrlFromRequest(request);
        expect(result).toBe('http://example.com/path?foo=bar');
    });

    it('should handle HTTPS protocol correctly', () => {
        const request = {
            protocol: 'https',
            headers: {
                host: 'secure.com',
            },
            url: '/secure-path',
        };

        const result = getCurrentUrlFromRequest(request);
        expect(result).toBe('https://secure.com/secure-path');
    });
});
