
describe('flatQuestionTreeAnswers', () => {
  const pattern = /{{(.*?)}}/g;

  it('should flatten a nested question tree with no children', () => {
    const answerArr = [
      {
        id: 1,
        answer: 'Answer 1',
        additionalClauseText: 'Clause text {{placeholder1}}',
        children: null,
      },
    ];

    const expected = [
      {
        id: 1,
        title: 'Answer 1',
        message: 'Clause text {{placeholder1}}',
        ansPlacheolder: ['placeholder1'],
      },
    ];

    const result = flatQuestionTreeAnswers(answerArr);

    expect(result).toEqual(expected);
  });

  it('should flatten a nested question tree with children', () => {
    const answerArr = [
      {
        id: 1,
        answer: 'Answer 1',
        additionalClauseText: 'Clause text {{placeholder1}}',
        children: {
          answers: [
            {
              id: 2,
              answer: 'Answer 2',
              additionalClauseText: null,
              children: null,
            },
          ],
        },
      },
    ];

    const expected = [
      {
        id: 1,
        title: 'Answer 1',
        message: 'Clause text {{placeholder1}}',
        ansPlacheolder: ['placeholder1'],
        children: [],
      },
      {
        id: 2,
        title: 'Answer 2',
        message: '',
        ansPlacheolder: [],
      },
    ];

    const result = flatQuestionTreeAnswers(answerArr);

    expect(result).toEqual(expected);
  });

  it('should handle answers with no additionalClauseText', () => {
    const answerArr = [
      {
        id: 1,
        answer: 'Answer 1',
        additionalClauseText: null,
        children: null,
      },
    ];

    const expected = [
      {
        id: 1,
        title: 'Answer 1',
        message: '',
        ansPlacheolder: [],
      },
    ];

    const result = flatQuestionTreeAnswers(answerArr);

    expect(result).toEqual(expected);
  });

  it('should handle empty input array', () => {
    const result = flatQuestionTreeAnswers([]);
    expect(result).toEqual([]);
  });

  it('should handle deeply nested answers', () => {
    const answerArr = [
      {
        id: 1,
        answer: 'Answer 1',
        additionalClauseText: 'Text {{placeholder1}}',
        children: {
          answers: [
            {
              id: 2,
              answer: 'Answer 2',
              additionalClauseText: 'Text {{placeholder2}}',
              children: {
                answers: [
                  {
                    id: 3,
                    answer: 'Answer 3',
                    additionalClauseText: null,
                    children: null,
                  },
                ],
              },
            },
          ],
        },
      },
    ];

    const expected = [
      {
        id: 1,
        title: 'Answer 1',
        message: 'Text {{placeholder1}}',
        ansPlacheolder: ['placeholder1'],
        children: [],
      },
      {
        id: 2,
        title: 'Answer 2',
        message: 'Text {{placeholder2}}',
        ansPlacheolder: ['placeholder2'],
        children: [],
      },
      {
        id: 3,
        title: 'Answer 3',
        message: '',
        ansPlacheolder: [],
      },
    ];

    const result = flatQuestionTreeAnswers(answerArr);

    expect(result).toEqual(expected);
  });
});
