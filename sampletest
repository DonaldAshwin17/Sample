import { previewSet } from './path-to-your-file'; // Adjust the import path
import { fetchSetById } from './path-to-fetchSetById'; // Adjust the import path
import { updateCurrentPreview } from './path-to-updateCurrentPreview'; // Adjust the import path

jest.mock('./path-to-fetchSetById', () => ({
  fetchSetById: jest.fn(),
}));

jest.mock('./path-to-updateCurrentPreview', () => ({
  updateCurrentPreview: jest.fn(),
}));

describe('previewSet', () => {
  const dispatchMock = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('should fetch set by id and dispatch updateCurrentPreview with the fetched set', async () => {
    const mockSet = { id: 1, name: 'Sample Set' };
    fetchSetById.mockResolvedValue(mockSet);

    await previewSet(1)(dispatchMock);

    expect(fetchSetById).toHaveBeenCalledWith(1);
    expect(dispatchMock).toHaveBeenCalledWith(updateCurrentPreview(mockSet));
  });

  it('should handle fetchSetById rejection', async () => {
    const error = new Error('Fetch failed');
    fetchSetById.mockRejectedValue(error);

    try {
      await previewSet(1)(dispatchMock);
    } catch (e) {
      expect(fetchSetById).toHaveBeenCalledWith(1);
      expect(dispatchMock).not.toHaveBeenCalled();
    }
  });
});
