import { fetchSetList } from './path-to-your-file'; // Adjust the import path as needed
import * as api from '../path-to-api'; // Adjust the import path as needed
import { fetchSetListSuccess } from '../path-to-actions'; // Adjust the import path as needed

jest.mock('../path-to-api'); // Mock the api module
jest.mock('../path-to-actions'); // Mock the action creators

describe('fetchSetList', () => {
  let dispatchMock;

  beforeEach(() => {
    dispatchMock = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should call API without queryParams and dispatch fetchSetListSuccess', async () => {
    const setListResponse = {
      list: [
        { dispositions: [{ dispositionId: '1' }], rest: { id: 1, name: 'Set 1' } },
        { dispositions: [{ dispositionId: '2' }], rest: { id: 2, name: 'Set 2' } },
      ],
      count: 2,
    };

    api.get = jest.fn().mockResolvedValue(setListResponse);

    await fetchSetList(null)(dispatchMock);

    expect(api.get).toHaveBeenCalledWith(`${constants.API_V1_URL}/sets`);
    expect(dispatchMock).toHaveBeenCalledWith(
      fetchSetListSuccess(
        [
          { id: 1, name: 'Set 1', disclaimers: ['1'] },
          { id: 2, name: 'Set 2', disclaimers: ['2'] },
        ],
        2
      )
    );
  });

  it('should catch and log errors', async () => {
    const consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});

    // Mock API call to throw an error
    api.get = jest.fn().mockRejectedValue(new Error('API get failed'));

    await fetchSetList(null)(dispatchMock);

    expect(consoleSpy).toHaveBeenCalledWith(expect.any(Error));

    consoleSpy.mockRestore();
  });
});
